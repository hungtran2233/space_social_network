generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  comment_id   Int            @id @default(autoincrement())
  user_id      Int?
  image_id     Int?
  post_id      Int?
  content      String?        @db.VarChar(500)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  user         user?          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_1")
  image        image?         @relation(fields: [image_id], references: [image_id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_2")
  post         post?          @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_3")
  comment_like comment_like[]

  @@index([image_id], map: "image_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model comment_like {
  user_id    Int
  comment_id Int
  user       user    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_like_ibfk_1")
  comment    comment @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction, map: "comment_like_ibfk_2")

  @@id([user_id, comment_id])
  @@index([comment_id], map: "comment_id")
}

model friend_ship {
  friendship_id                    Int                 @id @default(autoincrement())
  user_id_1                        Int?
  user_id_2                        Int?
  status                           friend_ship_status?
  created_at                       DateTime?           @default(now()) @db.Timestamp(0)
  updated_at                       DateTime?           @db.Timestamp(0)
  user_friend_ship_user_id_1Touser user?               @relation("friend_ship_user_id_1Touser", fields: [user_id_1], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friend_ship_ibfk_1")
  user_friend_ship_user_id_2Touser user?               @relation("friend_ship_user_id_2Touser", fields: [user_id_2], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friend_ship_ibfk_2")

  @@index([user_id_1], map: "user_id_1")
  @@index([user_id_2], map: "user_id_2")
}

model image {
  image_id      Int          @id @default(autoincrement())
  image_name    String?      @db.VarChar(100)
  path          String?      @db.VarChar(255)
  description   String?      @db.VarChar(255)
  image_list_id Int?
  is_delete     Boolean?     @default(false)
  created_at    DateTime?    @default(now()) @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
  comment       comment[]
  image_list    image_list?  @relation(fields: [image_list_id], references: [image_list_id], onDelete: NoAction, onUpdate: NoAction, map: "image_ibfk_1")
  image_like    image_like[]
  news          news[]
  post_image    post_image[]
  save_image    save_image[]

  @@index([image_list_id], map: "image_list_id")
}

model image_like {
  user_id  Int
  image_id Int
  user     user  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "image_like_ibfk_1")
  image    image @relation(fields: [image_id], references: [image_id], onDelete: Cascade, onUpdate: NoAction, map: "image_like_ibfk_2")

  @@id([user_id, image_id])
  @@index([image_id], map: "image_id")
}

model image_list {
  image_list_id Int       @id @default(autoincrement())
  user_id       Int?
  list_name     String?   @db.VarChar(255)
  privacy_id    Int?
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  image         image[]
  user          user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "image_list_ibfk_1")
  privacy       privacy?  @relation(fields: [privacy_id], references: [privacy_id], onDelete: NoAction, onUpdate: NoAction, map: "image_list_ibfk_2")

  @@index([privacy_id], map: "privacy_id")
  @@index([user_id], map: "user_id")
}

model msg_conversation {
  conversation_id                       Int                     @id @default(autoincrement())
  conversation_name                     String?                 @db.VarChar(255)
  user_id_1                             Int?
  user_id_2                             Int?
  is_one_to_one                         Boolean?                @default(true)
  uuid_v4                               String?                 @db.VarChar(255)
  created_at                            DateTime?               @default(now()) @db.Timestamp(0)
  user_msg_conversation_user_id_1Touser user?                   @relation("msg_conversation_user_id_1Touser", fields: [user_id_1], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_conversation_ibfk_1")
  user_msg_conversation_user_id_2Touser user?                   @relation("msg_conversation_user_id_2Touser", fields: [user_id_2], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_conversation_ibfk_2")
  msg_message                           msg_message[]
  msg_user_conversation                 msg_user_conversation[]

  @@index([user_id_1], map: "user_id_1")
  @@index([user_id_2], map: "user_id_2")
}

model msg_message {
  message_id              Int                       @id @default(autoincrement())
  conversation_id         Int?
  sender_id               Int?
  content                 String?                   @db.VarChar(5000)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  user                    user?                     @relation(fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_ibfk_1")
  msg_conversation        msg_conversation?         @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_ibfk_2")
  msg_message_read_status msg_message_read_status[]

  @@index([conversation_id], map: "conversation_id")
  @@index([sender_id], map: "sender_id")
}

model post {
  post_id    Int          @id @default(autoincrement())
  user_id    Int?
  content    String?      @db.VarChar(5000)
  video_url  String?      @db.VarChar(1000)
  privacy_id Int?
  created_at DateTime?    @default(now()) @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  is_deleted Boolean?     @default(false)
  comment    comment[]
  user       user?        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "post_ibfk_1")
  privacy    privacy?     @relation(fields: [privacy_id], references: [privacy_id], onDelete: NoAction, onUpdate: NoAction, map: "post_ibfk_2")
  post_image post_image[]
  post_like  post_like[]

  @@index([privacy_id], map: "privacy_id")
  @@index([user_id], map: "user_id")
}

model post_image {
  post_image_id Int    @id @default(autoincrement())
  post_id       Int?
  image_id      Int?
  post          post?  @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "post_image_ibfk_1")
  image         image? @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "post_image_ibfk_2")

  @@index([image_id], map: "image_id")
  @@index([post_id], map: "post_id")
}

model post_like {
  user_id Int
  post_id Int
  user    user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "post_like_ibfk_1")
  post    post @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "post_like_ibfk_2")

  @@id([user_id, post_id])
  @@index([post_id], map: "post_id")
}

model privacy {
  privacy_id Int          @id @default(autoincrement())
  options    String       @db.VarChar(255)
  image_list image_list[]
  news       news[]
  post       post[]
}

model ro_permission {
  permission_id      Int                  @id @default(autoincrement())
  permission_name    String?              @db.VarChar(100)
  permission_desc    String?              @db.VarChar(255)
  ro_role_permission ro_role_permission[]
}

model ro_role {
  role_id            Int                  @id @default(autoincrement())
  user_id            Int?
  role_name          ro_role_role_name?
  role_desc          String?              @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  user               user?                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_role_ibfk_1")
  ro_role_permission ro_role_permission[]

  @@index([user_id], map: "user_id")
}

model ro_role_permission {
  role_permission_id Int            @id @default(autoincrement())
  role_id            Int?
  permission_id      Int?
  ro_role            ro_role?       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_role_permission_ibfk_1")
  ro_permission      ro_permission? @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_role_permission_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
}

model save_image {
  user_id    Int
  image_id   Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  user       user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "save_image_ibfk_1")
  image      image     @relation(fields: [image_id], references: [image_id], onDelete: Cascade, onUpdate: NoAction, map: "save_image_ibfk_2")

  @@id([user_id, image_id])
  @@index([image_id], map: "image_id")
}

model session {
  session_id Int       @id @default(autoincrement())
  user_id    Int?
  token      String?   @db.VarChar(2000)
  is_online  Boolean?
  login_at   DateTime? @default(now()) @db.Timestamp(0)
  logout_at  DateTime? @db.Timestamp(0)
  user       user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user {
  user_id                                           Int                       @id @default(autoincrement())
  email                                             String?                   @db.VarChar(100)
  pass_word                                         String?                   @db.VarChar(100)
  full_name                                         String?                   @db.VarChar(100)
  avatar                                            String?                   @db.VarChar(255)
  link_url                                          String?                   @db.VarChar(255)
  is_active                                         Boolean?                  @default(true)
  comment                                           comment[]
  comment_like                                      comment_like[]
  friend_ship_friend_ship_user_id_1Touser           friend_ship[]             @relation("friend_ship_user_id_1Touser")
  friend_ship_friend_ship_user_id_2Touser           friend_ship[]             @relation("friend_ship_user_id_2Touser")
  image_like                                        image_like[]
  image_list                                        image_list[]
  msg_conversation_msg_conversation_user_id_1Touser msg_conversation[]        @relation("msg_conversation_user_id_1Touser")
  msg_conversation_msg_conversation_user_id_2Touser msg_conversation[]        @relation("msg_conversation_user_id_2Touser")
  msg_message                                       msg_message[]
  msg_message_read_status                           msg_message_read_status[]
  msg_user_conversation                             msg_user_conversation[]
  news                                              news[]
  post                                              post[]
  post_like                                         post_like[]
  ro_role                                           ro_role[]
  save_image                                        save_image[]
  session                                           session[]
  user_follow_user_follow_follower_idTouser         user_follow[]             @relation("user_follow_follower_idTouser")
  user_follow_user_follow_following_idTouser        user_follow[]             @relation("user_follow_following_idTouser")
  user_info                                         user_info?
}

model user_follow {
  follower_id                         Int
  following_id                        Int
  user_user_follow_follower_idTouser  user @relation("user_follow_follower_idTouser", fields: [follower_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_follow_ibfk_1")
  user_user_follow_following_idTouser user @relation("user_follow_following_idTouser", fields: [following_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_follow_ibfk_2")

  @@id([follower_id, following_id])
  @@index([following_id], map: "following_id")
}

model user_info {
  user_id     Int       @id
  age         Int?
  cover_image String?   @db.VarChar(255)
  gender      String?   @db.VarChar(100)
  country     String?   @db.VarChar(100)
  study_at    String?   @db.VarChar(150)
  working_at  String?   @db.VarChar(150)
  favorites   String?   @db.VarChar(500)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  user        user      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "user_info_ibfk_1")
}

model news {
  news_id      Int       @id @default(autoincrement())
  image_id     Int?
  news_content String?   @db.VarChar(500)
  music_url    String?   @db.VarChar(500)
  privacy_id   Int?
  user_id      Int?
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  expires_at   DateTime? @default(dbgenerated("(now() + interval 24 hour)")) @db.Timestamp(0)
  user         user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "news_ibfk_1")
  image        image?    @relation(fields: [image_id], references: [image_id], onDelete: Cascade, onUpdate: NoAction, map: "news_ibfk_2")
  privacy      privacy?  @relation(fields: [privacy_id], references: [privacy_id], onDelete: NoAction, onUpdate: NoAction, map: "news_ibfk_3")

  @@index([image_id], map: "image_id")
  @@index([user_id], map: "user_id")
  @@index([privacy_id], map: "privacy_id")
}

model msg_user_conversation {
  user_conversation_id Int               @id @default(autoincrement())
  user_id              Int?
  conversation_id      Int?
  joined_datetime      DateTime?         @db.DateTime(0)
  left_datetime        DateTime?         @db.DateTime(0)
  user                 user?             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_user_conversation_ibfk_1")
  msg_conversation     msg_conversation? @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_user_conversation_ibfk_2")

  @@index([conversation_id], map: "conversation_id")
  @@index([user_id], map: "user_id")
}

model msg_message_read_status {
  message_read_status_id Int          @id @default(autoincrement())
  message_id             Int?
  user_id                Int?
  is_read                Boolean?
  msg_message            msg_message? @relation(fields: [message_id], references: [message_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_read_status_ibfk_1")
  user                   user?        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_read_status_ibfk_2")

  @@index([message_id], map: "message_id")
  @@index([user_id], map: "user_id")
}

enum ro_role_role_name {
  admin
  user
  celebrity
  guests
}

enum friend_ship_status {
  pending
  accepted
  blocked
}
