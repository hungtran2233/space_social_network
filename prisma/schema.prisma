generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  comment_id         Int       @id @default(autoincrement())
  user_id            Int?
  image_id           Int?
  post_id            Int?
  content            String?   @db.VarChar(500)
  like_count_comment Int?
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  user               user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_1")
  image              image?    @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_2")
  post               post?     @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_ibfk_3")
  likes              likes[]

  @@index([image_id], map: "image_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model friend_ship {
  friendship_id                    Int                 @id @default(autoincrement())
  user_id_1                        Int?
  user_id_2                        Int?
  status                           friend_ship_status?
  created_at                       DateTime?           @default(now()) @db.Timestamp(0)
  user_friend_ship_user_id_1Touser user?               @relation("friend_ship_user_id_1Touser", fields: [user_id_1], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friend_ship_ibfk_1")
  user_friend_ship_user_id_2Touser user?               @relation("friend_ship_user_id_2Touser", fields: [user_id_2], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "friend_ship_ibfk_2")

  @@index([user_id_1], map: "user_id_1")
  @@index([user_id_2], map: "user_id_2")
}

model image {
  image_id         Int          @id @default(autoincrement())
  image_name       String?      @db.VarChar(100)
  path             String?      @db.VarChar(255)
  description      String?      @db.VarChar(255)
  like_count_image Int?
  image_list_id    Int?
  created_at       DateTime?    @default(now()) @db.Timestamp(0)
  updated_at       DateTime?    @default(now()) @db.Timestamp(0)
  comment          comment[]
  image_list       image_list?  @relation(fields: [image_list_id], references: [image_list_id], onDelete: NoAction, onUpdate: NoAction, map: "image_ibfk_1")
  likes            likes[]
  save_image       save_image[]

  @@index([image_list_id], map: "image_list_id")
}

model image_list {
  image_list_id Int       @id @default(autoincrement())
  user_id       Int?
  list_name     String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  image         image[]
  user          user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "image_list_ibfk_1")

  @@index([user_id], map: "user_id")
}

model likes {
  like_id    Int       @id @default(autoincrement())
  user_id    Int?
  image_id   Int?
  post_id    Int?
  comment_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  user       user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_ibfk_1")
  image      image?    @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_ibfk_2")
  post       post?     @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_ibfk_3")
  comment    comment?  @relation(fields: [comment_id], references: [comment_id], onDelete: NoAction, onUpdate: NoAction, map: "likes_ibfk_4")

  @@index([comment_id], map: "comment_id")
  @@index([image_id], map: "image_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model msg_conversation {
  conversation_id   Int               @id @default(autoincrement())
  conversation_name String?           @db.VarChar(255)
  creator_id        Int?
  created_at        DateTime?         @default(now()) @db.Timestamp(0)
  user              user?             @relation(fields: [creator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_conversation_ibfk_1")
  msg_message       msg_message[]
  msg_participant   msg_participant[]

  @@index([creator_id], map: "creator_id")
}

model msg_message {
  message_id       Int               @id @default(autoincrement())
  conversation_id  Int?
  sender_id        Int?
  content          String?           @db.VarChar(5000)
  created_at       DateTime?         @default(now()) @db.Timestamp(0)
  user             user?             @relation(fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_ibfk_1")
  msg_conversation msg_conversation? @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_message_ibfk_2")
  notification     notification[]

  @@index([conversation_id], map: "conversation_id")
  @@index([sender_id], map: "sender_id")
}

model msg_participant {
  participant_id   Int               @id @default(autoincrement())
  user_id          Int?
  conversation_id  Int?
  joined_datetime  DateTime?         @db.DateTime(0)
  left_datetime    DateTime?         @db.DateTime(0)
  user             user?             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_participant_ibfk_1")
  msg_conversation msg_conversation? @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction, map: "msg_participant_ibfk_2")

  @@index([conversation_id], map: "conversation_id")
  @@index([user_id], map: "user_id")
}

model notification {
  notification_id Int                @id @default(autoincrement())
  user_id         Int?
  type            notification_type?
  post_id         Int?
  message_id      Int?
  is_read         Boolean?           @default(false)
  created_at      DateTime?          @default(now()) @db.Timestamp(0)
  user            user?              @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")
  post            post?              @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction, map: "notification_ibfk_2")
  msg_message     msg_message?       @relation(fields: [message_id], references: [message_id], onDelete: Cascade, onUpdate: NoAction, map: "notification_ibfk_3")

  @@index([message_id], map: "message_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model post {
  post_id      Int            @id @default(autoincrement())
  user_id      Int?
  content      String?        @db.VarChar(5000)
  image_url    String?        @db.VarChar(1000)
  video_url    String?        @db.VarChar(1000)
  privacy      post_privacy?
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @db.Timestamp(0)
  is_deleted   Boolean?       @default(false)
  comment      comment[]
  likes        likes[]
  notification notification[]
  user         user?          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "post_ibfk_1")

  @@index([user_id], map: "user_id")
}

model ro_permission {
  permission_id      Int                  @id @default(autoincrement())
  permission_name    String?              @db.VarChar(100)
  permission_desc    String?              @db.VarChar(255)
  ro_role_permission ro_role_permission[]
}

model ro_role {
  role_id            Int                  @id @default(autoincrement())
  role_name          String?              @db.VarChar(100)
  role_desc          String?              @db.VarChar(255)
  ro_role_permission ro_role_permission[]
  ro_user_role       ro_user_role[]
}

model ro_role_permission {
  role_permission_id Int            @id @default(autoincrement())
  role_id            Int?
  permission_id      Int?
  ro_role            ro_role?       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_role_permission_ibfk_1")
  ro_permission      ro_permission? @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_role_permission_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
}

model ro_user_role {
  user_role_id Int       @id @default(autoincrement())
  user_id      Int?
  role_id      Int?
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  ro_role      ro_role?  @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_user_role_ibfk_1")
  user         user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "ro_user_role_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model save_image {
  user_id    Int
  image_id   Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  user       user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "save_image_ibfk_1")
  image      image     @relation(fields: [image_id], references: [image_id], onDelete: NoAction, onUpdate: NoAction, map: "save_image_ibfk_2")

  @@id([user_id, image_id])
  @@index([image_id], map: "image_id")
}

model session {
  session_id Int       @id @default(autoincrement())
  user_id    Int?
  token      String?   @db.VarChar(2000)
  is_online  Boolean?
  login_at   DateTime? @default(now()) @db.Timestamp(0)
  logout_at  DateTime? @db.DateTime(0)
  user       user?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user {
  user_id                                 Int                @id @default(autoincrement())
  email                                   String?            @db.VarChar(100)
  pass_word                               String?            @db.VarChar(100)
  full_name                               String?            @db.VarChar(100)
  age                                     Int?
  avatar                                  String?            @db.VarChar(255)
  gender                                  String?            @db.VarChar(100)
  country                                 String?            @db.VarChar(100)
  created_at                              DateTime?          @default(now()) @db.Timestamp(0)
  updated_at                              DateTime?          @default(now()) @db.Timestamp(0)
  is_deleted                              Boolean?           @default(false)
  comment                                 comment[]
  friend_ship_friend_ship_user_id_1Touser friend_ship[]      @relation("friend_ship_user_id_1Touser")
  friend_ship_friend_ship_user_id_2Touser friend_ship[]      @relation("friend_ship_user_id_2Touser")
  image_list                              image_list[]
  likes                                   likes[]
  msg_conversation                        msg_conversation[]
  msg_message                             msg_message[]
  msg_participant                         msg_participant[]
  notification                            notification[]
  post                                    post[]
  ro_user_role                            ro_user_role[]
  save_image                              save_image[]
  session                                 session[]
}

enum notification_type {
  post
  message
}

enum friend_ship_status {
  pending
  accepted
  blocked
}

enum post_privacy {
  public
  private
  friends
}
